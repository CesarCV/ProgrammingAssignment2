makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
View(makeVector)
View(makeVector)
myVector <- makeVector(1:15)
View(myVector)
myVector$get()
myVector$getmean()
myVector$setmean()
cachemean(myVector)
cachemean(myVector)
cachemean(myVector)
cachemean(myVector)
myVector$getmean()
View(myVector)
matriz <- matrix(1:6,nrow=2,ncol=3)
matriz
nrow(matriz)
ncol(matriz)
## The following functions initialize a matrix (makeCacheMatrix) and then
## calculates it's inverse, which is stored. When the function cacheSolve is
## call, returns the cache matrix if available, calculate otherwise.
## The function makeCacheMatrix initialize a matrix and the "setters" and "getters"
makeCacheMatrix <- function(x = matrix()) {
nr <- nrow(x)
nc <- ncol(x)
inv <- matrix(data = NA, nrow = nr, ncol = nc)
set <- function(y) {
nr <- nrow(y)
nc <- ncol(y)
x <<- y
inv <<- matrix(data = NA, nrow = nr, ncol = nc)
}
get <- function() x
setinv <- function(inversa) inv <<- inversa
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## The following function returns the inverse of the matrix "x". If it was previously calculated,
## return the cache inverse matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
m1 <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
m1
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
## The following functions initialize a matrix (makeCacheMatrix) and then
## calculates it's inverse, which is stored. When the function cacheSolve is
## call, returns the cache matrix if available, calculate otherwise.
## The function makeCacheMatrix initialize a matrix and the "setters" and "getters"
makeCacheMatrix <- function(x = matrix()) {
nr <- nrow(x)
nc <- ncol(x)
inv <- matrix(data = NA, nrow = nr, ncol = nc)
set <- function(y) {
nr <- nrow(y)
nc <- ncol(y)
x <<- y
inv <<- matrix(data = NA, nrow = nr, ncol = nc)
}
get <- function() x
setinv <- function(inversa) inv <<- inversa
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## The following function returns the inverse of the matrix "x". If it was previously calculated,
## return the cache inverse matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
m1 <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
?solve
## The following functions initialize a matrix (makeCacheMatrix) and then
## calculates it's inverse, which is stored. When the function cacheSolve is
## call, returns the cache matrix if available, calculate otherwise.
## The function makeCacheMatrix initialize a matrix and the "setters" and "getters"
makeCacheMatrix <- function(x = matrix()) {
nr <- nrow(x)
nc <- ncol(x)
inv <- NULL
set <- function(y) {
nr <- nrow(y)
nc <- ncol(y)
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inversa) inv <<- inversa
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## The following function returns the inverse of the matrix "x". If it was previously calculated,
## return the cache inverse matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
n2 <- matrix(c(5/8, -1/8, -7/8, 3/8), nrow = 2, ncol = 2)
myMatrix_object$set(n2)
myMatrix_object$get()
5/8
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
